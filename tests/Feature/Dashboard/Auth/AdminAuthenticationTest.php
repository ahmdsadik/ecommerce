<?php

namespace Tests\Feature\Dashboard\Auth;

use App\Models\Admin;
use App\Models\User;
use App\Providers\RouteServiceProvider;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Tests\TestCase;

class AdminAuthenticationTest extends TestCase
{
    use RefreshDatabase;

    private Admin $admin;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->admin = Admin::factory()->create();
    }

    public function test_login_screen_can_be_rendered(): void
    {
        $response = $this->get('/dashboard/login');

        $response->assertStatus(200);
    }

    public function test_admin_can_authenticate_using_the_login_screen(): void
    {
        $response = $this->post('/dashboard/login', [
            'check' => $this->admin->email,
            'password' => 'password',
        ]);

        $this->assertAuthenticated('admin');
        $response->assertRedirect(RouteServiceProvider::DASHBOARD);
    }

    public function test_admins_can_not_authenticate_with_invalid_password(): void
    {
        $this->post('/dashboard/login', [
            'check' => $this->admin->email,
            'password' => 'wrong-password',
        ]);

        $this->assertGuest('admin');
    }

    public function test_admins_can_logout(): void
    {
        $response = $this->actingAs($this->admin, 'admin')->post('/dashboard/logout');

        $this->assertGuest();
        $response->assertRedirect('/dashboard/login');
    }

    public function test_login_with_empty_inputs_return_errors()
    {
        $response = $this->post('/dashboard/login');

        $this->assertGuest('admin');

        $response->assertStatus(302)
            ->assertRedirect()
            ->assertSessionHasErrors(['check', 'password']);
    }

    public function test_visit_login_should_redirect_to_dashboard_if_authenticated(): void
    {
        $this->actingAs($this->admin, 'admin')
            ->get('/dashboard/login')
            ->assertStatus(302)
            ->assertRedirectToRoute('dashboard.index');
    }

    public function test_if_user_cannot_login_to_dashboard()
    {
        $user = User::factory()->create();

        $response = $this->actingAs($user)->post('dashboard/login',
            [
                'check' => $user->email,
                'password' => 'password'
            ]
        );

        $this->assertGuest('admin');

        $response->assertRedirect()
            ->assertSessionHasErrors(['check']);
    }
}
